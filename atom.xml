<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不万能的杂货铺</title>
  
  <subtitle>Record my life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kursaal.vip/"/>
  <updated>2018-02-27T06:38:04.295Z</updated>
  <id>http://kursaal.vip/</id>
  
  <author>
    <name>About Mr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsonp解决跨域问题</title>
    <link href="http://kursaal.vip/2018/02/27/jsonp%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://kursaal.vip/2018/02/27/jsonp解决跨域问题/</id>
    <published>2018-02-27T02:32:07.000Z</published>
    <updated>2018-02-27T06:38:04.295Z</updated>
    
    <content type="html"><![CDATA[<p>jsonp名字听上去挺高大上，实际只要理解了就是个矮穷矬。  </p><h4 id="jsonp原理"><a href="#jsonp原理" class="headerlink" title="jsonp原理"></a>jsonp原理</h4><p>利用script标签没有跨域限制的“漏洞”，来达到与第三方通讯的目的。 </p><p>第三方产生的响应为json数据的包装（故称之为jsonp，即json padding）。  </p><p>它的基本思想是，网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。  </p><p>首先，网页动态插入script元素，由它向跨源网址发出请求。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function addScriptTag(src) &#123;</span><br><span class="line">  var script = document.createElement(&apos;script&apos;);</span><br><span class="line">  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</span><br><span class="line">  script.src = src;</span><br><span class="line">  document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(data) &#123;</span><br><span class="line">  console.log(&apos;Your public IP address is: &apos; + data.ip);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码通过动态添加script元素，向服务器example.com发出请求。注意，该请求的查询字符串有一个callback参数，用来指定回调函数的名字，这对于JSONP是必需的。<br>服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo(&#123;</span><br><span class="line">  &quot;ip&quot;: &quot;8.8.8.8&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>由于script元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了foo函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。</p><h4 id="面试中的问题"><a href="#面试中的问题" class="headerlink" title="面试中的问题"></a>面试中的问题</h4><ol><li>知道 jsonp么？<br>答：知道，可以实现跨域请求；<br>答不知道：换别的话题。</li><li>为什么 ajax 不可以，但是 jsonp 可以实现跨域请求呢？<br>答：因为 jsonp 是通过插入一个 script 标签，利用 script 可以跨域请求来实现的。换问题3；<br>答：面试官傻逼，ajax 现在也可以使用 cors 来做跨域请求；换问题 2.5。<br>答不知道：换问题 2.5。<br>2.5  jsonp实现原理？<br>答：通过创建一个 script 标签，将 src 设置为目标请求，插入到 dom 中，服务器接受该请求并返回数据，数据通常被包裹在回调钩子中；<br>回答不知道：我自己解释 jsonp 的实现。  </li><li>可以用 jsonp 发送 post 请求么？<br>答：显然不行，看过支持 post 请求的 script 么？<br>答不知道：反问，看过支持 post 请求的 script 么？  </li><li>参考 jsonp，还有那些发送跨域请求的途径？<br>答：img link iframe 等元素都可以发送跨域请求呀！<br>答不知道：反问img link iframe 等元素是不是也可以？</li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a><br><a href="https://www.zhihu.com/question/28890257/answer/269738446" target="_blank" rel="noopener">jsonp为什么不支持post请求，寸志的回答</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jsonp名字听上去挺高大上，实际只要理解了就是个矮穷矬。  &lt;/p&gt;
&lt;h4 id=&quot;jsonp原理&quot;&gt;&lt;a href=&quot;#jsonp原理&quot; class=&quot;headerlink&quot; title=&quot;jsonp原理&quot;&gt;&lt;/a&gt;jsonp原理&lt;/h4&gt;&lt;p&gt;利用script标签没
      
    
    </summary>
    
      <category term="javaScript" scheme="http://kursaal.vip/categories/javaScript/"/>
    
    
      <category term="跨域" scheme="http://kursaal.vip/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="jsonp" scheme="http://kursaal.vip/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>javaScript中this的用法</title>
    <link href="http://kursaal.vip/2018/01/22/this%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://kursaal.vip/2018/01/22/this的用法/</id>
    <published>2018-01-22T07:22:16.000Z</published>
    <updated>2018-01-24T08:26:33.023Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>this是JavaScript中一个比较难理解的点，很多新人会很迷惑。本文非原创，是阮一峰老师个人博客里的，个人感觉理解起来会很容易。拿来与大家分享。<a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="noopener">原文链接</a>  </p></blockquote><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>this是Javascript语言的一个关键字。</p><p>它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。比如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　this.x = 1;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，==调用函数的那个对象。==</p><hr><p>下面分四种情况，详细讨论this的用法。  </p><h5 id="情况一：纯粹的函数调用"><a href="#情况一：纯粹的函数调用" class="headerlink" title="情况一：纯粹的函数调用"></a>情况一：纯粹的函数调用</h5><p>这是函数的最通常用法，属于全局性调用，因此this就代表全局对象Global。</p><p>请看下面这段代码，它的运行结果是1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　this.x = 1;</span><br><span class="line"></span><br><span class="line">　　　　alert(this.x);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　test(); // 1</span><br></pre></td></tr></table></figure></p><p>为了证明this就是全局对象，我对代码做一些改变：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　　var x = 1;</span><br><span class="line"></span><br><span class="line">　　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　alert(this.x);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　test(); // 1</span><br></pre></td></tr></table></figure></p><p>运行结果还是1。再变一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　var x = 1;</span><br><span class="line"></span><br><span class="line">　　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　this.x = 0;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　test();</span><br><span class="line"></span><br><span class="line">　　alert(x); //0</span><br></pre></td></tr></table></figure><h5 id="情况二：作为对象方法的调用"><a href="#情况二：作为对象方法的调用" class="headerlink" title="情况二：作为对象方法的调用"></a>情况二：作为对象方法的调用</h5><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　alert(this.x);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　var o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　o.x = 1;</span><br><span class="line"></span><br><span class="line">　　o.m = test;</span><br><span class="line"></span><br><span class="line">　　o.m(); // 1</span><br></pre></td></tr></table></figure><h5 id="情况三-：作为构造函数调用"><a href="#情况三-：作为构造函数调用" class="headerlink" title="情况三 ：作为构造函数调用"></a>情况三 ：作为构造函数调用</h5><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　this.x = 1;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　var o = new test();</span><br><span class="line"></span><br><span class="line">　　alert(o.x); // 1</span><br></pre></td></tr></table></figure></p><p>运行结果为1。为了表明这时this不是全局对象，我对代码做一些改变：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　var x = 2;</span><br><span class="line"></span><br><span class="line">　　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　this.x = 1;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　var o = new test();</span><br><span class="line"></span><br><span class="line">　　alert(x); //2</span><br></pre></td></tr></table></figure></p><p>运行结果为2，表明全局变量x的值根本没变。  </p><h5 id="情况四：-apply调用"><a href="#情况四：-apply调用" class="headerlink" title="情况四： apply调用"></a>情况四： apply调用</h5><p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">　　var x = 0;</span><br><span class="line"></span><br><span class="line">　　function test()&#123;</span><br><span class="line"></span><br><span class="line">　　　　alert(this.x);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　var o=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　o.x = 1;</span><br><span class="line"></span><br><span class="line">　　o.m = test;</span><br><span class="line"></span><br><span class="line">　　o.m.apply(); //0</span><br></pre></td></tr></table></figure><p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。</p><p>如果把最后一行代码修改为 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　o.m.apply(o); //1</span><br></pre></td></tr></table></figure><p>运行结果就变成了1，证明了这时this代表的是对象o。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;this是JavaScript中一个比较难理解的点，很多新人会很迷惑。本文非原创，是阮一峰老师个人博客里的，个人感
      
    
    </summary>
    
      <category term="javaScript" scheme="http://kursaal.vip/categories/javaScript/"/>
    
    
      <category term="this" scheme="http://kursaal.vip/tags/this/"/>
    
      <category term="js" scheme="http://kursaal.vip/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>not defined、undefined和null的区别</title>
    <link href="http://kursaal.vip/2017/12/24/not-defined%E3%80%81undefined%E5%92%8Cnull%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://kursaal.vip/2017/12/24/not-defined、undefined和null的区别/</id>
    <published>2017-12-24T06:11:40.000Z</published>
    <updated>2018-03-05T06:18:14.702Z</updated>
    
    <content type="html"><![CDATA[<h5 id="not-defined"><a href="#not-defined" class="headerlink" title="not defined"></a>not defined</h5><p>意为没有定义的变量。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">console.log(m);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述代码中m没有被定义，此时浏览器会报错</p><blockquote><p>Uncaught ReferenceError: m is not defined  </p></blockquote><h5 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h5><p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：  </p><ol><li>变量被声明了，但没有赋值时，就等于undefined。</li><li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li><li>对象没有赋值的属性，该属性的值为undefined。</li><li>函数没有返回值时，默认返回undefined。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var i;</span><br><span class="line">i // undefined</span><br><span class="line"></span><br><span class="line">function f(x)&#123;console.log(x)&#125;</span><br><span class="line">f() // undefined</span><br><span class="line"></span><br><span class="line">var  o = new Object();</span><br><span class="line">o.p // undefined</span><br><span class="line"></span><br><span class="line">var x = f();</span><br><span class="line">x // undefined</span><br></pre></td></tr></table></figure><p>上面四种情况执行结果一样：不会报错，会打印出undefined。  </p><h5 id="null"><a href="#null" class="headerlink" title="null"></a>null</h5><p>null表示”没有对象”，即该处不应该有值。典型用法是：  </p><ol><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object.getPrototypeOf(Object.prototype)</span><br><span class="line">// null</span><br></pre></td></tr></table></figure><h5 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h5><p>这里需要注意的是：null == undefined结果是true的，null === undefined结果是false的。  </p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">阮一峰：undefined与null的区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;not-defined&quot;&gt;&lt;a href=&quot;#not-defined&quot; class=&quot;headerlink&quot; title=&quot;not defined&quot;&gt;&lt;/a&gt;not defined&lt;/h5&gt;&lt;p&gt;意为没有定义的变量。&lt;br&gt;例：&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="javaScript" scheme="http://kursaal.vip/categories/javaScript/"/>
    
    
      <category term="undefined" scheme="http://kursaal.vip/tags/undefined/"/>
    
      <category term="not defined" scheme="http://kursaal.vip/tags/not-defined/"/>
    
  </entry>
  
</feed>
